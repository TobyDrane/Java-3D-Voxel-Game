package com.idkstudios.game.world.characters;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.List;

import org.lwjgl.input.Mouse;
import org.lwjgl.opengl.GL11;

import com.idkstudios.game.GameObject;
import com.idkstudios.game.blocks.Block;
import com.idkstudios.game.blocks.BlockConstructor;
import com.idkstudios.game.blocks.BlockManager;
import com.idkstudios.game.blocks.BlockType;
import com.idkstudios.game.blocks.customblocks.Container;
import com.idkstudios.game.datastructures.AABB;
import com.idkstudios.game.game.ControlSettings;
import com.idkstudios.game.game.Game;
import com.idkstudios.game.inventory.DefualtPlayerInventory;
import com.idkstudios.game.inventory.Inventory.InventoryPlace;
import com.idkstudios.game.inventory.DoubleContainerInventory;
import com.idkstudios.game.inventory.InventoryIO;
import com.idkstudios.game.inventory.InventoryItem;
import com.idkstudios.game.inventory.SharedInventoryContent;
import com.idkstudios.game.items.ItemManager;
import com.idkstudios.game.items.tools.stone.StoneHoe;
import com.idkstudios.game.items.tools.wood.WoodenHoe;
import com.idkstudios.game.math.MathHelper;
import com.idkstudios.game.math.RayBlockIntersection;
import com.idkstudios.game.math.Vec3f;
import com.idkstudios.game.math.Vec3i;
import com.idkstudios.game.rendering.Camera;
import com.idkstudios.game.utils.IOUtilities;
import com.idkstudios.game.world.Chunk;
import com.idkstudios.game.world.Chunk.LightType;
import com.idkstudios.game.world.ChunkManager;

public class Player extends GameObject {

	private static BlockManager blockManager = BlockManager.getInstance();

	private Camera camera;
	/** Postion of the player absolute in the world */
	private float x, y, z;
	private Vec3f position;
	/** Rotation of the players head, in radians */
	private float rotX, rotY; // Radians
	private float bobbing, bobbingProcess;

	/* Spawn Point */
	private Vec3f spawnPoint;

	/* Movement variables */
	private float speedForward = 0.0f;
	private float speedSide = 0.0f;
	private float maxSpeed = 4.0f;
	private float eyeHeight = 1.7f;
	private float playerHeight = 1.85f;
	private float acceleration = 11.0f;
	private float ySpeed = 0.0f;
	private boolean onGround = false;
	private boolean flying = false;
	private int rotationSegment = 0;

	/* Body */
	private CharacterBody body;
	/* Editing */
	private float rayCastLength;
	private AABB intersectionTestingAABB;
	private AABB aimedBlockAABB;
	private byte aimedBlockType;
	private Vec3i aimedBlockPosition;
	private Vec3i aimedAdjacentBlockPosition;
	private float aimedBlockHealth;
	private AABB rayAABB;
	private ChunkManager chunkManager;
	private InventoryItem selectedItem;
	private int selectedInventoryItemIndex = 0;
	private boolean airSmashed;
	private boolean destroying;
	private boolean tilling;

	/* Inventory */
	private DefualtPlayerInventory inventory;
	private SharedInventoryContent sharedInventoryContent;

	public Player(float x, float y, float z) {
		position = new Vec3f(x, y, z);
		spawnPoint = new Vec3f(x, y, z);

		chunkManager = Game.getInstance().getWorld().getChunkManager();
		body = new CharacterBody();

		camera = new Camera();
		camera.setFovy(Game.getInstance().getConfiguration().getFOVY());
		this.x = x;
		this.y = y;
		this.z = z;

		inventory = new DefualtPlayerInventory();
		sharedInventoryContent = new SharedInventoryContent(4 * 9);
		inventory.setSharedContent(sharedInventoryContent);

		rayCastLength = Game.getInstance().getConfiguration()
				.getMaximumPlayerEditingDistance();
		rayAABB = new AABB(new Vec3f(), new Vec3f());
		aimedBlockPosition = new Vec3i(0, -1, 0);
		aimedBlockAABB = new AABB(new Vec3f(), new Vec3f());
		intersectionTestingAABB = new AABB(new Vec3f(), new Vec3f());

		setSelectedInventoryItemIndex(0);
	}

	public Player(Vec3f spawnPoint) {
		this(spawnPoint.x(), spawnPoint.y(), spawnPoint.z());
	}

	public Camera getFirstPersonCamera() {
		return camera;
	}

	public void setPosition(Vec3f position) {
		this.x = position.x();
		this.y = position.y();
		this.z = position.z();
	}

	/**
	 * The returned vector is the single instanced vector representing the
	 * players position. DO NOT MODIFY THIS VECTOR
	 * 
	 * @return the position of the player
	 */
	public Vec3f getPosition() {
		return position;
	}

	private Vec3f getSpawnPoint() {
		return spawnPoint;
	}

	@Override
	public void render() {

		GL11.glEnable(GL11.GL_DEPTH_TEST);
		GL11.glDepthFunc(GL11.GL_LEQUAL);

		GL11.glEnable(GL11.GL_BLEND);
		GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);

		if (aimedBlockPosition.y() != -1) {
			GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);
			GL11.glDisable(GL11.GL_TEXTURE_2D);

			aimedBlockAABB.render(0.0f, 0.0f, 0.0f, 0.1f);
			GL11.glEnable(GL11.GL_TEXTURE_2D);
		}

		if (selectedItem != null) {
			GL11.glPushMatrix();
			GL11.glEnable(GL11.GL_TEXTURE_2D);
			GL11.glDisable(GL11.GL_CULL_FACE);

			body.transformToRightHand();

			/* Prepare the light buffer */
			Chunk c = Game
					.getInstance()
					.getWorld()
					.getChunkManager()
					.getChunkContaining(MathHelper.floor(position.x()),
							MathHelper.floor(position.y()) + 1,
							MathHelper.floor(position.z()), false, false, false);
			if (c != null) {
				c.getLightBuffer().setReferencePoint(
						MathHelper.floor(position.x()),
						MathHelper.floor(position.y()) + 1,
						MathHelper.floor(position.z()));

				/* Render the object, with the lightbuffer */
				selectedItem.renderHoldableObject(c.getLightBuffer());
			}

			GL11.glEnable(GL11.GL_CULL_FACE);
			GL11.glPopMatrix();
		}
		GL11.glDisable(GL11.GL_DEPTH_TEST);
	}

	@Override
	public void update() {
		physics();
		movement();
		position.set(x, y, z);

		/* Update the camera */
		camera.setPosition(x, y + eyeHeight, z);
		camera.setRotation(rotX, rotY, bobbing);

		body.update();
		body.disableUsingRightHand();

		if (selectedItem != null) {
			body.animationSpeedRightHand = selectedItem.getAnimationSpeed();
		} else {
			body.animationSpeedRightHand = 1.0f;
		}

		rayCastBlock();
		
		/**
		 * Checks what the user is doing
		 */
		if (ControlSettings.isActionHold(ControlSettings.SMASH)) {
			smash();
		}else if(ControlSettings.isActionHold(ControlSettings.BUILD_OR_ACTION)){
			if(selectedItem instanceof WoodenHoe || selectedItem instanceof StoneHoe) {
				checkIfTill();
			}
		}else {
			destroying = false;
			tilling = false;
			airSmashed = false;
		}
	}

	private void movement() {
		float step = Game.getInstance().getStep();
		float factor = (onGround ? 1.0f : 0.5f);
		float accelerationStep = acceleration * step;

		float xStep = 0.0f;
		float zStep = 0.0f;
		
		if(ControlSettings.isActionHold(ControlSettings.FLY)){
			ySpeed += 14 * step;
			flying = true;
		}else{
			if(!onGround) {
				ySpeed -= 24 * step;
				flying = false;
			}
		}
		
		// Forward movement
		{
			if (ControlSettings.isActionHold(ControlSettings.MOVE_FORWARD)) {
				speedForward = Math.min(maxSpeed * (flying ? 3.0f : 1.0f),
						speedForward + acceleration * step);
			} else if (ControlSettings.isActionHold(ControlSettings.MOVE_BACK)) {
				speedForward = Math.max(-maxSpeed * (flying ? 3.0f : 1.0f),
						speedForward - acceleration * step);
			} else {
				if (speedForward != 0.0f) {
					if (speedForward < 0.0f) {
						speedForward += factor * accelerationStep;
						if (speedForward > 0.0f) {
							speedForward = 0.0f;
						}
					} else {
						speedForward -= factor * accelerationStep;
						if (speedForward < 0.0f) {
							speedForward = 0.0f;
						}
					}
				}

			}
			float xAdd = (float) (MathHelper.cos(rotY)) * speedForward * step;
			float zAdd = (float) (MathHelper.sin(-rotY)) * speedForward * step;

			xStep += xAdd;
			zStep += zAdd;

		}
		// Side movement
		{
			if (ControlSettings.isActionHold(ControlSettings.MOVE_LEFT)) {
				speedSide = Math.max(-maxSpeed * (flying ? 3.0f : 1.0f),
						speedSide - acceleration * step);
			} else if (ControlSettings.isActionHold(ControlSettings.MOVE_RIGHT)) {
				speedSide = Math.min(maxSpeed * (flying ? 3.0f : 1.0f),
						speedSide + acceleration * step);
			} else {
				if (speedSide != 0.0f) {
					if (speedSide < 0.0f) {
						speedSide += factor * accelerationStep;
						if (speedSide > 0.0f) {
							speedSide = 0.0f;
						}
					} else {
						speedSide -= factor * accelerationStep;
						if (speedSide < 0.0f) {
							speedSide = 0.0f;
						}
					}
				}
			}
			float xAdd = (float) (MathHelper.sin(rotY)) * speedSide * step;
			float zAdd = (float) (MathHelper.cos(rotY)) * speedSide * step;

			xStep += xAdd;
			zStep += zAdd;
		}

		x += xStep;
		z += zStep;

		Chunk bc = null;

		byte wall = 0;
		byte wall2 = 0;
		{
			int xx = MathHelper.floor(x), yy = MathHelper.floor(y + 0.1f), zz = MathHelper
					.floor(z);
			bc = chunkManager.getChunkContaining(xx, yy, zz, false, true, true);
			if (bc != null) {
				wall = bc.getBlockTypeAbsolute(xx, yy, zz, false, false, false);
			}
		}
		{
			int xx = MathHelper.floor(x), yy = MathHelper.floor(y + 0.1f) + 1, zz = MathHelper
					.floor(z);
			if (bc != null) {
				wall2 = bc
						.getBlockTypeAbsolute(xx, yy, zz, false, false, false);
			} else {
				bc = chunkManager.getChunkContaining(xx, yy, zz, false, true,
						true);
				if (bc != null) {
					wall2 = bc.getBlockTypeAbsolute(xx, yy, zz, false, false,
							false);
				}
			}
		}
		if ((wall > 0 && BlockManager.getInstance().getBlockType(wall)
				.isSolid())
				|| (wall2 > 0 && BlockManager.getInstance().getBlockType(wall2)
						.isSolid())) {

			x -= xStep;
			z -= zStep;

			speedForward *= -0.2f;
			speedSide *= -0.2f;
		}

		float speed = MathHelper.sqrt(speedForward * speedForward + speedSide
				* speedSide);
		speed /= maxSpeed;

		/**
		 * Currently not using bobbing
		 */
		bobbingProcess = 0;
		bobbingProcess = MathHelper.simplifyRadians(bobbingProcess);
//		bobbingProcess += step * 4.0f;
//		bobbingProcess = MathHelper.simplifyRadians(bobbingProcess);

		float dx = Mouse.getDX();
		float dy = Mouse.getDY();

		dx /= 300.0f;
		dy /= 300.0f;

		float rotSeg = rotationSegment;
		rotationSegment = MathHelper.round(rotY / MathHelper.f_PI * 10.0f);

		rotY -= dx;
		rotX += dy;

		/* If it changes from chunk, recheck visible chunks */
		if (MathHelper.floorDivision(MathHelper.floor(x + xStep),
				Chunk.CHUNK_SIZE_HORIZONTAL) != MathHelper.floorDivision(
				MathHelper.floor(x), Chunk.CHUNK_SIZE_HORIZONTAL)
				|| MathHelper.floorDivision(MathHelper.floor(z + zStep),
						Chunk.CHUNK_SIZE_HORIZONTAL) != MathHelper
						.floorDivision(MathHelper.floor(z),
								Chunk.CHUNK_SIZE_HORIZONTAL)
				|| rotationSegment != rotSeg) {
			Game.getInstance().getWorld().selectLocalChunks();
			Game.getInstance().getWorld().checkForNewVisibleChunks();
		}

		rotY = MathHelper.simplifyRadians(rotY);
		rotX = MathHelper.clamp(rotX, -MathHelper.f_PI / 2.001f,
				MathHelper.f_PI / 2.001f);
		if (flying) {
			bobbing *= 0.8f;
		} else {
			bobbing = MathHelper.sin(bobbingProcess) * 0.03f * speed
					* (MathHelper.f_PI / 2.0f - Math.abs(rotX))
					/ (MathHelper.f_PI / 2.0f);
		}
	}

	private void physics() {
		float step = Game.getInstance().getStep();
		ChunkManager chunkManager = Game.getInstance().getWorld()
				.getChunkManager();
		byte support = chunkManager.getBlock(MathHelper.floor(x),
				MathHelper.floor(y) - 1, MathHelper.floor(z), false, false,
				false);
		byte subSupport = chunkManager.getBlock(MathHelper.floor(x),
				MathHelper.floor(y) - 2, MathHelper.floor(z), false, false,
				false);
		float supportHeight = Float.NEGATIVE_INFINITY;

		if (ControlSettings.isActionHold(ControlSettings.JUMP)) {
			if (onGround) {
				ySpeed = 14f;
				onGround = false;
			} else if (flying) {
				ySpeed += 14f * step;
			}
		} else if (flying
				&& ControlSettings.isActionHold(ControlSettings.CROUCH)) {
			ySpeed -= 14f * step;
		}

		if (support > 0) {
			if (BlockManager.getInstance().getBlockType(support).isSolid()) {
				supportHeight = MathHelper.floor(y);
				onGround = false;
			}
		} else if (subSupport > 0) {
			if (BlockManager.getInstance().getBlockType(subSupport).isSolid()) {
				supportHeight = MathHelper.floor(y) - 1;
				onGround = false;
			}
		}

		if (supportHeight > y) {
			y = supportHeight;
			ySpeed = 0.0f;
			onGround = true;
		} else {
			if (!flying) {
				ySpeed -= step * 55f;
			} else {
				float newSpeedY = ySpeed * 0.1f;
				float diffY = newSpeedY - ySpeed;
				ySpeed += diffY * step;
			}
			y += ySpeed * step;
			if (ySpeed > 0.0f) {
				int headbangY = MathHelper.floor(y + 0.1f) + 2;
				byte headbang = chunkManager.getBlock(MathHelper.floor(x),
						headbangY, MathHelper.floor(z), false, false, false);
				if (headbang > 0 && (headbangY < y + playerHeight)) {
					y = (float) headbangY - playerHeight;
					ySpeed = 0.0f;
				}
			}
			{
				onGround = false;
				if (supportHeight >= y) {
					y = supportHeight;
					ySpeed = 0.0f;
					onGround = true;
				}
			}
		}
	}

	private void rayCastBlock() {
		float rayLenSquared = rayCastLength * rayCastLength;

		Vec3f rayDirection = camera.getLookDirection();
		Vec3f rayOrigin = camera.getPosition();

		rayDirection.normalise();

		/* Construct the AABB for the ray cast */
		rayAABB.getPosition().set(rayOrigin);
		rayAABB.getPosition().addFactor(rayDirection, rayCastLength * 0.5f);
		rayAABB.getDimensions().set(Math.abs(rayDirection.x()),
				Math.abs(rayDirection.y()), Math.abs(rayDirection.z()));
		rayAABB.getDimensions().scale(rayCastLength * 0.5f);

		int aabbX = MathHelper.round(rayAABB.getPosition().x());
		int aabbY = MathHelper.round(rayAABB.getPosition().y());
		int aabbZ = MathHelper.round(rayAABB.getPosition().z());

		RayBlockIntersection.Intersection closestIntersection = null;
		byte closestBlock = 0;

		/* Iterate over all possible candidates for the raycast */
		Vec3f v = new Vec3f();
		Vec3i newAimedBlockPosition = new Vec3i();
		byte bl = 0;
		boolean special = false;
		Chunk chunk = Game.getInstance().getWorld().getChunkManager()
				.getChunkContaining(aabbX, aabbY, aabbZ, false, false, false);
		if (chunk == null)
			return;

		for (int x = MathHelper.floor(rayAABB.minX()); x <= MathHelper
				.ceil(rayAABB.maxX()); ++x)
			for (int y = MathHelper.floor(rayAABB.minY()); y <= MathHelper
					.ceil(rayAABB.maxY()); ++y)
				for (int z = MathHelper.floor(rayAABB.minZ()); z <= MathHelper
						.ceil(rayAABB.maxZ()); ++z) {
					bl = chunk.getBlockTypeAbsolute(x, y, z, false, false,
							false);
					if (bl == 0 || bl == -1)
						continue;

					special = chunk.isBlockSpecialAbsolute(x, y, z);
					Block block = null;
					if (special) {
						block = chunk.getSpecialBlockAbsolute(x, y, z);
						if (block.isMoving()) {
							continue;
						}
						intersectionTestingAABB.set(block.getAABB());
					}

					v.set(x + 0.5f, y + 0.5f, z + 0.5f);

					v.sub(getPosition());
					float lenSquared = v.lengthSquared();
					if (lenSquared < rayLenSquared) {
						if (!special) {
							intersectionTestingAABB.getPosition().set(x + 0.5f,
									y + 0.5f, z + 0.5f);
							intersectionTestingAABB.getDimensions().set(
									blockManager.getBlockType(bl)
											.getDimensions());
							intersectionTestingAABB.recalcVertices();
						}
						/* Perform the raycast */
						List<RayBlockIntersection.Intersection> intersections = RayBlockIntersection
								.executeIntersection(x, y, z,
										intersectionTestingAABB, rayOrigin,
										rayDirection);
						if (!intersections.isEmpty()) {
							if (closestIntersection == null
									|| intersections.get(0).getDistance() < closestIntersection
											.getDistance()) {
								closestIntersection = intersections.get(0);
								closestBlock = bl;
								newAimedBlockPosition.set(x, y, z);

								if (special) {
									aimedBlockAABB.set(block.getAABB());
								} else {
									BlockType aimedBlockType = blockManager
											.getBlockType(bl);
									aimedBlockAABB
											.getPosition()
											.set(aimedBlockPosition.x(),
													aimedBlockPosition.y(),
													aimedBlockPosition.z())
											.add(aimedBlockType.getCenter());
									aimedBlockAABB.getDimensions().set(
											aimedBlockType.getDimensions());
								}
							}
						}
					}

				}

		if (closestIntersection != null) {
			if (!aimedBlockPosition.equals(newAimedBlockPosition)) {
				aimedBlockHealth = blockManager.getBlockType(closestBlock)
						.getResistance();
				aimedBlockPosition.set(newAimedBlockPosition);
				aimedBlockType = closestBlock;

				aimedBlockAABB.recalcVertices();
			}
			aimedAdjacentBlockPosition = closestIntersection
					.calcAdjacentBlockPos();
		} else {
			aimedBlockPosition.setY(-1);
			aimedAdjacentBlockPosition = null;
			aimedBlockType = 0;
		}
		if (closestIntersection != null && selectedItem != null
				&& aimedBlockPosition.y() != -1) {
			body.setBlockDistance(closestIntersection.getDistance());
		} else {
			body.setBlockDistance(0.0f);
		}
	}

	public DefualtPlayerInventory getInventory() {
		return inventory;
	}

	private void setSelectedInventoryItemIndex(int i) {
		InventoryPlace oldPlace = inventory
				.getInventoryPlace(selectedInventoryItemIndex);
		if (oldPlace != null) {
			if (oldPlace.getItem() != null) {
				body.forceDisableUsingRightHand();
			}
		}
		selectedInventoryItemIndex = i;
		InventoryPlace newPlace = inventory
				.getInventoryPlace(selectedInventoryItemIndex);
		if (newPlace != null) {
			if (newPlace.isStack()) {
				int itemType = newPlace.getStack().getItemType();
				selectedItem = ItemManager.getInstance().getInventoryItem(
						(short) itemType);
			} else {
				selectedItem = newPlace.getItem();
			}
		} else {
			selectedItem = null;
		}

	}
	
	/**
	 * This gets the place where the user has put the block/item
	 */
	public void inventoryContentChanged() {
		setSelectedInventoryItemIndex(selectedInventoryItemIndex);
	}

	public String coordinatesToString() {
		return String.format("x: %8s, y: %8s, z: %8s",
				String.format("%.3f", x), String.format("%.3f", y),
				String.format("%.3f", z));
	}

	public SharedInventoryContent getSharedInventoryContent() {
		return sharedInventoryContent;
	}

	public BlockType getAimedBlockType() {
		return BlockManager.getInstance().getBlockType(aimedBlockType);
	}

	public void toggleFlying() {
		flying = !flying;
	}

	public void spreadLight() {
		if (aimedBlockType != 0) {
			System.out.println("Spread Light! ("
					+ aimedAdjacentBlockPosition.x() + ", "
					+ aimedAdjacentBlockPosition.y() + ", "
					+ aimedAdjacentBlockPosition.z() + ")");
			Chunk chunk = Game
					.getInstance()
					.getWorld()
					.getChunkManager()
					.getChunkContaining(aimedAdjacentBlockPosition.x(),
							aimedAdjacentBlockPosition.y(),
							aimedAdjacentBlockPosition.z(), false, false, false);
			chunk.spreadLight(aimedAdjacentBlockPosition.x(),
					aimedAdjacentBlockPosition.y(),
					aimedAdjacentBlockPosition.z(), (byte) 15, LightType.BLOCK);
		}
	}

	public void unspreadLight() {
		if (aimedBlockType != 0) {
			System.out.println("Spread Light! ("
					+ aimedAdjacentBlockPosition.x() + ", "
					+ aimedAdjacentBlockPosition.y() + ", "
					+ aimedAdjacentBlockPosition.z() + ")");
			Chunk chunk = Game
					.getInstance()
					.getWorld()
					.getChunkManager()
					.getChunkContaining(aimedAdjacentBlockPosition.x(),
							aimedAdjacentBlockPosition.y(),
							aimedAdjacentBlockPosition.z(), false, false, false);
			chunk.unspreadLight(aimedAdjacentBlockPosition.x(),
					aimedAdjacentBlockPosition.y(),
					aimedAdjacentBlockPosition.z(), (byte) 15, LightType.BLOCK);
		}
	}

	public void toggleLight() {
		if (aimedBlockType != 0) {
			Chunk chunk = Game
					.getInstance()
					.getWorld()
					.getChunkManager()
					.getChunkContaining(aimedAdjacentBlockPosition.x(),
							aimedAdjacentBlockPosition.y(),
							aimedAdjacentBlockPosition.z(), false, false, false);
			byte light = chunk.getLightAbsolute(aimedAdjacentBlockPosition.x(),
					aimedAdjacentBlockPosition.y(),
					aimedAdjacentBlockPosition.z(), LightType.BLOCK);
			if (light == 15) {
				unspreadLight();
			} else {
				spreadLight();
			}
		}
	}

	public void save() throws IOException {
		File file = Game.getInstance().getRelativeFile(
				Game.FILE_BASE_USER_DATA, "${world}/player.dat");

		DataOutputStream dos = new DataOutputStream(new FileOutputStream(file));

		/* Position */
		IOUtilities.writeVec3f(dos, getPosition());
		dos.writeInt(rotationSegment);

		/* Spawn Point */
		IOUtilities.writeVec3f(dos, getSpawnPoint());

		/* Inventory */
		InventoryIO.writeInventory(getInventory(), dos, 0, getInventory()
				.size());

		/* Selected inventory index */
		dos.writeByte(selectedInventoryItemIndex);

		dos.close();

	}

	public boolean load() throws IOException {
		File file = Game.getInstance().getRelativeFile(
				Game.FILE_BASE_USER_DATA, "${world}/player.dat");

		if (!file.exists()) {
			return false;
		}

		DataInputStream dis = new DataInputStream(new FileInputStream(file));

		/* Position */
		IOUtilities.readVec3f(dis, getPosition());
		x = getPosition().x();
		y = getPosition().y();
		z = getPosition().z();

		/* Rotation */
		rotationSegment = dis.readInt();
		rotY = rotationSegment / 10.0f * MathHelper.f_PI;

		/* Spawn Point */
		IOUtilities.readVec3f(dis, getSpawnPoint());

		/* Inventory */
		InventoryIO.readInventory(dis, getInventory(), 0);

		/* Selected inventory index */
		selectedInventoryItemIndex = dis.readByte();
		setSelectedInventoryItemIndex(selectedInventoryItemIndex);

		dis.close();

		return true;
	}

	/**
	 * This method checks to see if the ground can be tilled
	 */
	private void checkIfTill() {
		if(aimedBlockType != 0) {
			/**
			 * Tilling only works if the block is dirt
			 */
			if(getAimedBlockType() == BlockManager.getInstance().getBlockType("dirt")) {
				canTill();
			}
		}else if(selectedItem != null) {
			if(!airSmashed && !tilling) {
				body.airSmash();
				airSmashed = true;
			}
		}
	}
	
	/**
	 * This is where the game makes all the required stuff
	 * to till the land
	 */
	private void canTill() {
//		getAimedBlockType().getBrush().get
	}
	
	/**
	 * For when the player is hitting a block
	 */
	public void smash() {
		if (aimedBlockType != 0) {
			destroying = true;
			float toolDamage = 0.0f;
			if (selectedItem != null) {
				body.enableUsingRightHand();
				toolDamage = selectedItem.calcDamageInflictedByBlock(aimedBlockType);
				aimedBlockHealth -= selectedItem.calcDamageFactorToBlock(aimedBlockType) * Game.getInstance().getStep() * 5.0f;
			} else {
				aimedBlockHealth -= Game.getInstance().getStep() * 5.0f;
			}
			boolean destroy = aimedBlockHealth <= 0.0f;
			
			/**
			 * If the block has been destroyed
			 */
			if (destroy) {
				chunkManager.removeBlock(aimedBlockPosition.x(), aimedBlockPosition.y(), aimedBlockPosition.z());
				
				/**
				 * Add the block back to the inventory
				 */
				int mineResult = getAimedBlockType().getMineResult();
				int mineResultCount = getAimedBlockType().getMineResultCount();
				if (mineResult != 0) {
					for (int i = 0; i < mineResultCount; ++i) {
						boolean added = inventory.addToInventory(ItemManager.getInstance().getInventoryItem((short) (mineResult == -1 ? getAimedBlockType().getInventoryTypeID(): mineResult)));

						if (added) {
							// TODO Play sound for taking an item
						}
					}
				}
				
				/**
				 * Check to see if the block is a special block
				 */
				if(getAimedBlockType() == BlockManager.getInstance().getBlockType("container")) {
					/**
					 * If the block is a container you get what items are in the inventory
					 * and if there are some you add these to the players inventory
					 */

					// TODO Add what they have in the chests to the players inventory
				}
				
				aimedBlockPosition.set(0, -1, 0);
				aimedAdjacentBlockPosition = null;
				aimedBlockType = 0;
				if (selectedItem != null) {
					selectedItem.inflictDamage(toolDamage);
				}
			}
		} else if (selectedItem != null) {
			if (!airSmashed && !destroying) {
				body.airSmash();
				airSmashed = true;
			}
		}
	}

	public void buildOrAction() {
		if (aimedBlockPosition.y() != -1) {
			if (getAimedBlockType().hasSpecialAction()) {
				Block block = chunkManager.getSpecialBlock(
						aimedBlockPosition.x(), aimedBlockPosition.y(),
						aimedAdjacentBlockPosition.z());
				block.performSpecialAction();
			} else if (selectedItem instanceof BlockType) {
				int bX = aimedAdjacentBlockPosition.x();
				int bY = aimedAdjacentBlockPosition.y();
				int bZ = aimedAdjacentBlockPosition.z();

				int pX = MathHelper.floor(x);
				int pY = MathHelper.floor(y);
				int pZ = MathHelper.floor(z);

				if (bX == pX && (bY == pY || bY == pY + 1) && bZ == pZ) {
					/**
					 * The players is in the way of where the block needs to go
					 */
				} else {
					Chunk bc = chunkManager.getChunkContaining(bX, bY, bZ,
							true, true, true);
					byte currentBlock = bc.getBlockTypeAbsolute(bX, bY, bZ,
							false, false, false);
					if (currentBlock == 0) {
						BlockType type = ((BlockType) selectedItem);
						if (type.getCustomClass() == null) {
							bc.setDefaultBlockAbsolute(bX, bY, bZ, type,
									(byte) 0, true, true, true);
						} else {
							Block block = BlockConstructor.construct(bX, bY,
									bZ, bc, type.getID(), (byte) 0);
							System.out.println("Build special block! " + block
									+ " (" + block.getClass().getSimpleName()
									+ ")");
							bc.setSpecialBlockAbsolute(bX, bY, bZ, block, true,
									true, true);
						}

						inventory.getInventoryPlace(selectedInventoryItemIndex)
								.getStack().decreaseItemCount();
						setSelectedInventoryItemIndex(selectedInventoryItemIndex);
					}
				}
			}
		}
	}

	public void scrollInventoryItem() {
		float wheel = Mouse.getEventDWheel();
		if (wheel != 0) {
			wheel /= 210.0f;
			setSelectedInventoryItemIndex(MathHelper.clamp(
					selectedInventoryItemIndex - MathHelper.round(wheel), 0, 8));
		}
	}

	public float getEyeHeight() {
		return eyeHeight;
	}

	public int getSelectedInventoryItemIndex() {
		return selectedInventoryItemIndex;
	}
}
